#include <stdio.h>

#include "mw.h"

void do_master_stuff(int argc, char ** argv, struct mw_api_spec *f)
{
	int number_of_slaves;

	MPI_Comm_size(MPI_COMM_WORLD, &number_of_slaves);
	
	mw_work_t ** work_list;

	work_list = f->create(argc, argv);

	mw_work_t * work_unit;

	int 
		num_work_units = sizeof(work_list) / sizeof(work_unit),
		i = 0;
	
	for(i=0; i<num_work_units; ++i)
	{
		;
	}

	printf("master received %d units of work!!\n", num_work_units);

        int workCounter = 0;

        for (int i = 1; i < number_of_slaves; i++)
          {
            MPI_Send(work_list[workCounter], f->work_sz, MPI_CHAR, i, WORK_TAG, MPI_COMM_WORLD);
            workCounter++;
          }

        int result;
        MPIStatus status;

        mw_result_t* result_matrix = malloc(res_sz * num_work_units);
        int resultCounter = 0;

        while (work_list[workCounter] != NULL)
          {
            MPI_Recv(&result, f->res_sz, MPI_CHAR, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &status);

            result_matrix[resultCounter] = result;
            MPI_Send(work_list[workCounter], f->work_sz, MPI_CHAR, status.MPI_SOURCE, WORK_TAG, MPI_COMM_WORLD);
            workCounter++;
          }

        f->result(num_work_units, result_matrix);

}
